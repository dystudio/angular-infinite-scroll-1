+function(angular,undefined){"use strict";angular.module("srph.infinite-scroll",[]).directive("srphInfiniteScroll",directive);function directive($window,$document,$timeout,$q){return{scope:{callback:"&srphInfiniteScroll",disabled:"=",container:"=",threshold:"=",throttle:"=",immediate:"="},restrict:"EA",link:linkFn};function linkFn(scope,element,attributes){var promise=null;var callback=scope.callback;var threshold=scope.threshold||100;var throttle=scope.throttle||350;var immediate=!!scope.immediate||true;var $container=$getContainer(scope.container);$container.on("scroll",$handle);scope.$on("$destroy",$handleUnbind);function $handle(evt){var disabled=scope.disabled;if(!angular.isUndefined(disabled)&&!!disabled||promise!==null){return}var height=$container.height();var scroll=$container.scrollTop();var scrollHeight=$container.prop("scrollHeight");if(scroll+threshold>scrollHeight-height){promise=$timeout(function(){$q.when(callback()).then(function(){promise=null})},throttle,true)}}function $handleUnbind(){$container.unbind("scroll",$handle)}function $getContainer(container){var _container=function(){switch(container){case!!angular.isUndefined(container):return $document;case!!(container instanceof HTMLElement):return container;case!!(container===true||container===false):return element;case!!angular.isString(container):return container=="parent"?element.parent():$document.querySelector(container)}}();return angular.element(_container)}}}}(angular);